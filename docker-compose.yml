version: '3.8'

services:
  # Neuromorphic Autonomous Trading System
  neuromorphic-trader:
    build:
      context: .
      dockerfile_inline: |
        FROM rust:latest as builder
        WORKDIR /app
        COPY Cargo.toml ./
        COPY neuromorphic-core/ ./neuromorphic-core/
        COPY neuromorphic-barter-bridge/ ./neuromorphic-barter-bridge/
        COPY paper-trader-app/ ./paper-trader-app/
        RUN cargo generate-lockfile
        RUN cargo build --release --example autonomous_trader
        
        FROM debian:bookworm-slim
        RUN apt-get update && apt-get install -y \
          ca-certificates \
          libssl3 \
          curl \
          && rm -rf /var/lib/apt/lists/*
        WORKDIR /app
        COPY --from=builder /app/target/release/examples/autonomous_trader /app/
        EXPOSE 3002
        CMD ["./autonomous_trader"]
    ports:
      - "3001:3002"  # Autonomous trader metrics
    networks:
      - neuromorphic-net
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Neuromorphic Trading Metrics Server
  metrics-server:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
        WORKDIR /app
        COPY metrics_server.py .
        EXPOSE 3002
        CMD ["python3", "metrics_server.py"]
    ports:
      - "3002:3002"
    networks:
      - neuromorphic-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:3002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: docker.io/grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - neuromorphic-net
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_PROVISIONING_ENABLED=true
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/system-overview-dashboard.json
    restart: unless-stopped
    depends_on:
      neuromorphic-trader:
        condition: service_healthy
      metrics-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Metrics Server (Alternative)
  prometheus-metrics:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        COPY prometheus_metrics_server.py .
        EXPOSE 9090
        CMD ["python3", "prometheus_metrics_server.py"]
    ports:
      - "9090:9090"
    networks:
      - neuromorphic-net
    restart: unless-stopped
    profiles:
      - prometheus

  # Stock Monitoring Dashboard
  dashboard:
    image: nginx:alpine
    container_name: neuromorphic-dashboard
    ports:
      - "8080:80"
    volumes:
      - ./dashboard.html:/usr/share/nginx/html/index.html:ro
    networks:
      - neuromorphic-net
    restart: unless-stopped
    depends_on:
      - neuromorphic-trader

  # Demo Stock API for Dashboard Testing
  demo-stock-api:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        COPY demo-stock-api.py .
        EXPOSE 3003
        CMD ["python3", "demo-stock-api.py"]
    ports:
      - "3003:3003"
    networks:
      - neuromorphic-net
    restart: unless-stopped

volumes:
  grafana-data:
    driver: local

networks:
  neuromorphic-net:
    driver: bridge